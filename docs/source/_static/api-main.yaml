openapi: 3.0.0
info:
  description: |
    This is the specification of the main IoToad API.
  version: "1.0.0"
  title: IoToad main API
servers:
  - description: IoToad API endpoint
    url: https://iotoad.org/api
tags:
  - name: in
    description: Path for writing or updating devices
  - name: out
    description: Path for reading data
paths:
  /in/{agent}:
    post:
      tags:
        - in
      summary: Send write/update request to Agent
      operationId: inRequest
      parameters:
        - name: agent
          in: path
          description: Agent ID, which represents the MQTT topic where the Agent listens. 
          required: true
          schema:
            type: string
            pattern: "[^/]+"
            example: "sp_controller"
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/InRequestBody'
  /out/{component}:
    get:
      tags:
        - out
      summary: Send read request
      operationId: outRequest
      parameters:
        - name: component
          in: path
          description: API component ID, which represents the MQTT topic where the API component. 
          required: true
          schema:
            type: string
            pattern: "[^/]+"
            example: "influx"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OutObject'
        '400':
          description: Invalid operation
components:
  schemas:
    InObject:
      type: object
      properties:
        subtopics:
          type: array
          items:
            type: string
            format: uri
          example: ["sp_m1", "sp_r1.c2"]
        payload:
          type: string
          example: "{'status': 0}"
    OutObject:
      type: object
      
      
      
  requestBodies:
    InRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InObject'
      description: Every topic in 'subtopics', they are appended to the topic in the path. So if there are n subtopics, n topics are generated, and the payload is published to each of the topics. Payload is what is sent to the Agent
      required: true